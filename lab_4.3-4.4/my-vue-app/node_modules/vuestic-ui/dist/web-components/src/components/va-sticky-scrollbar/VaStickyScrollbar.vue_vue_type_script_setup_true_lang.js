import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeStyle, createElementVNode } from "vue";
import { g as getScrollbarSize } from "../../utils/scrollbar-size.js";
import { u as useElementRect } from "../../composables/useElementRect.js";
import { u as useNumericProp } from "../../composables/useNumericProp.js";
import { u as useEvent } from "../../composables/useEvent.js";
import { u as useResizeObserver } from "../../composables/useResizeObserver.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "VaStickyScrollbar",
  props: {
    el: { type: null },
    direction: { default: "horizontal", type: String },
    offset: { default: 0, type: [Number, String] }
  },
  setup(__props) {
    const props = __props;
    const currentEl = ref(null);
    const offsetProp = useNumericProp("offset");
    const parentElement = computed(() => {
      var _a;
      if (props.el) {
        return props.el;
      }
      return ((_a = currentEl.value) == null ? void 0 : _a.parentNode) ?? null;
    });
    const parentRect = useElementRect(parentElement);
    const stickyScrollWrapperStyle = computed(() => {
      const el = parentElement.value;
      if (!el) {
        return {};
      }
      const parentEl = el;
      const scrollSize = getScrollbarSize(parentEl);
      const { bottom, left, right, top } = parentRect.value;
      if (props.direction === "vertical") {
        if (left > window.innerWidth) {
          return { display: "none" };
        }
        if (right < window.innerWidth) {
          return { display: "none" };
        }
        return {
          position: "fixed",
          top: `${top}px`,
          right: 0,
          height: `${parentEl.clientHeight}px`,
          overflowY: "auto",
          overflowX: "hidden"
        };
      }
      if (top > window.innerHeight) {
        return { display: "none" };
      }
      if (bottom < window.innerHeight) {
        return { display: "none" };
      }
      return {
        position: "fixed",
        top: `${Math.min(bottom, window.innerHeight) - scrollSize - Number(offsetProp.value)}px`,
        width: `${parentEl.clientWidth}px`,
        overflowX: "auto",
        overflowY: "hidden"
      };
    });
    useEvent("scroll", (e) => {
      var _a, _b;
      if (!currentEl.value) {
        return;
      }
      if (props.direction === "horizontal") {
        (_a = parentElement.value) == null ? void 0 : _a.scrollTo({
          left: currentEl.value.scrollLeft
        });
      } else {
        (_b = parentElement.value) == null ? void 0 : _b.scrollTo({
          top: currentEl.value.scrollTop
        });
      }
    }, currentEl);
    useEvent("scroll", (e) => {
      var _a, _b, _c, _d;
      if (!currentEl.value) {
        return;
      }
      if (props.direction === "horizontal") {
        if (((_a = parentElement.value) == null ? void 0 : _a.scrollLeft) === currentEl.value.scrollLeft) {
          return;
        }
        currentEl.value.scrollTo({
          left: (_b = parentElement.value) == null ? void 0 : _b.scrollLeft
        });
      } else {
        if (((_c = parentElement.value) == null ? void 0 : _c.scrollTop) === currentEl.value.scrollTop) {
          return;
        }
        currentEl.value.scrollTo({
          top: (_d = parentElement.value) == null ? void 0 : _d.scrollTop
        });
      }
    }, parentElement);
    const scrollWidth = ref(0);
    const scrollHeight = ref(0);
    useResizeObserver(computed(() => {
      if (!parentElement.value) {
        return [];
      }
      return [...parentElement.value.children];
    }), () => {
      scrollWidth.value = parentElement.value.scrollWidth;
      scrollHeight.value = parentElement.value.scrollHeight;
    });
    const fakeContentStyle = computed(() => {
      if (props.direction === "vertical") {
        return {
          width: "1px",
          height: `${scrollHeight.value}px`
        };
      }
      return {
        height: "1px",
        width: `${scrollWidth.value}px`
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        style: normalizeStyle(stickyScrollWrapperStyle.value),
        ref_key: "currentEl",
        ref: currentEl
      }, [
        createElementVNode("div", {
          style: normalizeStyle(fakeContentStyle.value)
        }, null, 4)
      ], 4);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaStickyScrollbar.vue_vue_type_script_setup_true_lang.js.map
