import { computed, watch } from "vue";
import { i as isServer } from "../../../utils/ssr.mjs";
import { j as cssVariableName } from "../utils.mjs";
import { r as removeStyleElement, a as addOrUpdateStyleElement } from "../../../utils/dom.mjs";
import { u as useColors } from "../../../composables/useColors.mjs";
const generateCSSVariable = (key, value) => {
  return `${cssVariableName(key)}: ${value};
`;
};
const STYLE_ROOT_ATTR = "data-va-app";
const getStyleElementId = (id) => `va-color-variables-${id}`;
const createColorConfigPlugin = (app, config) => {
  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors();
  const renderCSSVariables = (colors = configColors) => {
    if (!colors) {
      return;
    }
    const colorNames = Object.keys(colors);
    const renderedColors = colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(";");
    const renderedOnColors = colorNames.map((key) => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(";");
    return `${renderedColors};${renderedOnColors}`;
  };
  const renderCSSVariablesStyleContent = (colors = configColors, selector = ":root, :host") => {
    const colorNames = Object.keys(colors);
    let result = `${selector} {
`;
    colorNames.forEach((key) => {
      result += generateCSSVariable(key, colors[key]);
    });
    colorNames.forEach((key) => {
      result += generateCSSVariable(`on-${key}`, getColor(getTextColor(colors[key])));
    });
    result += "}\n";
    return result;
  };
  const uniqueId = computed(() => app._uid);
  const stylesRootSelector = computed(() => ":root, :host");
  const updateColors = (newValue) => {
    if (!newValue || isServer()) {
      return;
    }
    const styleContent = renderCSSVariablesStyleContent(newValue, stylesRootSelector.value);
    addOrUpdateStyleElement(getStyleElementId(uniqueId.value), () => styleContent);
  };
  function getAppStylesRootAttribute() {
    return { [STYLE_ROOT_ATTR]: uniqueId.value };
  }
  const origMount = app.mount;
  app.mount = function(...args) {
    const result = origMount.apply(this, args);
    const appRootElement = app._container;
    const existingStylesId = appRootElement.getAttribute(STYLE_ROOT_ATTR);
    if (existingStylesId && existingStylesId !== uniqueId.value.toString()) {
      removeStyleElement(getStyleElementId(existingStylesId));
    }
    appRootElement.setAttribute(STYLE_ROOT_ATTR, uniqueId.value.toString());
    return result;
  };
  watch(configColors, (newValue) => {
    updateColors(newValue);
  }, { immediate: true, deep: true });
  return {
    colors: configColors,
    currentPresetName,
    getAppStylesRootAttribute,
    renderCSSVariables,
    updateColors,
    renderCSSVariablesStyleContent
  };
};
export {
  createColorConfigPlugin as c
};
//# sourceMappingURL=create-color-config-plugin.mjs.map
