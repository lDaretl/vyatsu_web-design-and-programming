{"version":3,"file":"create-color-config-plugin.mjs","sources":["../../../../../../src/services/color/plugin/create-color-config-plugin.ts"],"sourcesContent":["import { PartialGlobalConfig } from './../../global-config/types'\nimport { ColorVariables } from './../types'\nimport { App, watch, computed, onMounted } from 'vue'\nimport { isServer } from '../../../utils/ssr'\nimport { cssVariableName } from '../utils'\nimport { useColors } from '../../../composables'\nimport { generateUniqueId } from '../../../utils/uuid'\nimport { addOrUpdateStyleElement, removeStyleElement } from '../../../utils/dom'\nimport { isDev } from '../../../utils/env'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(cssVariableName(name), value)\n}\n\nexport const generateCSSVariable = (key: string, value: string) => {\n  return `${cssVariableName(key)}: ${value};\\n`\n}\n\nconst STYLE_ROOT_ATTR = 'data-va-app'\n\nconst getStyleElementId = (id: string | number) => `va-color-variables-${id}`\n\nexport const createColorConfigPlugin = (app: App, config?: PartialGlobalConfig) => {\n  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors()\n\n  /** Renders CSS variables string. Use this in SSR mode */\n  const renderCSSVariables = (colors: ColorVariables | undefined = configColors) => {\n    if (!colors) { return }\n\n    const colorNames = Object.keys(colors)\n    const renderedColors = colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(';')\n    const renderedOnColors = colorNames.map((key) => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(';')\n\n    return `${renderedColors};${renderedOnColors}`\n  }\n\n  const renderCSSVariablesStyleContent = (colors: ColorVariables = configColors, selector = ':root, :host') => {\n    const colorNames = Object.keys(colors)\n\n    let result = `${selector} {\n`\n    colorNames.forEach((key) => {\n      result += generateCSSVariable(key, colors[key])\n    })\n    colorNames.forEach((key) => {\n      result += generateCSSVariable(`on-${key}`, getColor(getTextColor(colors[key])))\n    })\n    result += '}\\n'\n\n    return result\n  }\n\n  const uniqueId = computed(() => app._uid)\n\n  // TODO: Use this selector later\n  const stylesRootSelector = computed(() => ':root, :host') // `[${STYLE_ROOT_ATTR}=\"${uniqueId.value}\"]`\n\n  const updateColors = (newValue: ColorVariables | undefined) => {\n    if (!newValue || isServer()) { return }\n\n    const styleContent = renderCSSVariablesStyleContent(newValue, stylesRootSelector.value)\n\n    addOrUpdateStyleElement(getStyleElementId(uniqueId.value), () => styleContent)\n  }\n\n  function getAppStylesRootAttribute () {\n    return { [STYLE_ROOT_ATTR]: uniqueId.value }\n  }\n\n  const origMount = app.mount\n\n  app.mount = function (...args: Parameters<typeof origMount>) {\n    const result = origMount.apply(this, args)\n    const appRootElement = app._container as HTMLElement\n\n    // Remove previous styles when remounting to the same root element (happens on HMR)\n    const existingStylesId = appRootElement.getAttribute(STYLE_ROOT_ATTR)\n\n    if (existingStylesId && existingStylesId !== uniqueId.value.toString()) {\n      removeStyleElement(getStyleElementId(existingStylesId))\n    }\n\n    appRootElement.setAttribute(STYLE_ROOT_ATTR, uniqueId.value.toString())\n\n    return result\n  }\n\n  watch(configColors, (newValue) => {\n    updateColors(newValue)\n  }, { immediate: true, deep: true })\n\n  return {\n    colors: configColors,\n    currentPresetName,\n    getAppStylesRootAttribute,\n    renderCSSVariables,\n    updateColors,\n    renderCSSVariablesStyleContent,\n  }\n}\n"],"names":[],"mappings":";;;;;AAca,MAAA,sBAAsB,CAAC,KAAa,UAAkB;AACjE,SAAO,GAAG,gBAAgB,GAAG,CAAC,KAAK,KAAK;AAAA;AAC1C;AAEA,MAAM,kBAAkB;AAExB,MAAM,oBAAoB,CAAC,OAAwB,sBAAsB,EAAE;AAE9D,MAAA,0BAA0B,CAAC,KAAU,WAAiC;AAC3E,QAAA,EAAE,QAAQ,cAAc,cAAc,UAAU,mBAAmB,gBAAgB;AAGnF,QAAA,qBAAqB,CAAC,SAAqC,iBAAiB;AAChF,QAAI,CAAC,QAAQ;AAAE;AAAA,IAAO;AAEhB,UAAA,aAAa,OAAO,KAAK,MAAM;AACrC,UAAM,iBAAiB,WAAW,IAAI,CAAC,QAAQ,GAAG,gBAAgB,GAAG,CAAC,KAAK,OAAO,GAAG,CAAC,EAAE,EAAE,KAAK,GAAG;AAC5F,UAAA,mBAAmB,WAAW,IAAI,CAAC,QAAQ,GAAG,gBAAgB,MAAM,GAAG,EAAE,CAAC,KAAK,SAAS,aAAa,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,GAAG;AAE7H,WAAA,GAAG,cAAc,IAAI,gBAAgB;AAAA,EAAA;AAG9C,QAAM,iCAAiC,CAAC,SAAyB,cAAc,WAAW,mBAAmB;AACrG,UAAA,aAAa,OAAO,KAAK,MAAM;AAEjC,QAAA,SAAS,GAAG,QAAQ;AAAA;AAEb,eAAA,QAAQ,CAAC,QAAQ;AAC1B,gBAAU,oBAAoB,KAAK,OAAO,GAAG,CAAC;AAAA,IAAA,CAC/C;AACU,eAAA,QAAQ,CAAC,QAAQ;AAChB,gBAAA,oBAAoB,MAAM,GAAG,IAAI,SAAS,aAAa,OAAO,GAAG,CAAC,CAAC,CAAC;AAAA,IAAA,CAC/E;AACS,cAAA;AAEH,WAAA;AAAA,EAAA;AAGT,QAAM,WAAW,SAAS,MAAM,IAAI,IAAI;AAGlC,QAAA,qBAAqB,SAAS,MAAM,cAAc;AAElD,QAAA,eAAe,CAAC,aAAyC;AACzD,QAAA,CAAC,YAAY,YAAY;AAAE;AAAA,IAAO;AAEtC,UAAM,eAAe,+BAA+B,UAAU,mBAAmB,KAAK;AAEtF,4BAAwB,kBAAkB,SAAS,KAAK,GAAG,MAAM,YAAY;AAAA,EAAA;AAG/E,WAAS,4BAA6B;AACpC,WAAO,EAAE,CAAC,eAAe,GAAG,SAAS,MAAM;AAAA,EAC7C;AAEA,QAAM,YAAY,IAAI;AAElB,MAAA,QAAQ,YAAa,MAAoC;AAC3D,UAAM,SAAS,UAAU,MAAM,MAAM,IAAI;AACzC,UAAM,iBAAiB,IAAI;AAGrB,UAAA,mBAAmB,eAAe,aAAa,eAAe;AAEpE,QAAI,oBAAoB,qBAAqB,SAAS,MAAM,YAAY;AACnD,yBAAA,kBAAkB,gBAAgB,CAAC;AAAA,IACxD;AAEA,mBAAe,aAAa,iBAAiB,SAAS,MAAM,UAAU;AAE/D,WAAA;AAAA,EAAA;AAGH,QAAA,cAAc,CAAC,aAAa;AAChC,iBAAa,QAAQ;AAAA,KACpB,EAAE,WAAW,MAAM,MAAM,KAAM,CAAA;AAE3B,SAAA;AAAA,IACL,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}