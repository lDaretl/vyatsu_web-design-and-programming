export declare const VaPagination: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        visiblePages: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        pages: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        boundaryLinks: {
            type: BooleanConstructor;
            default: boolean;
        };
        boundaryNumbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        directionLinks: {
            type: BooleanConstructor;
            default: boolean;
        };
        input: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideOnSinglePage: {
            type: BooleanConstructor;
            default: boolean;
        };
        total: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        pageSize: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        boundaryIconLeft: {
            type: StringConstructor;
            default: string;
        };
        boundaryIconRight: {
            type: StringConstructor;
            default: string;
        };
        directionIconLeft: {
            type: StringConstructor;
            default: string;
        };
        directionIconRight: {
            type: StringConstructor;
            default: string;
        };
        gapped: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        activePageColor: {
            type: StringConstructor;
            default: string;
        };
        activeButtonProps: {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            default: () => {};
        };
        buttonProps: {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            default: () => {};
        };
        buttonsPreset: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToTheFirstPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToPreviousPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToSpecificPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToSpecificPageInputLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToNextPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToLastPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        goNextPage: () => void;
        goPrevPage: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        visiblePages: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        pages: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        boundaryLinks: {
            type: BooleanConstructor;
            default: boolean;
        };
        boundaryNumbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        directionLinks: {
            type: BooleanConstructor;
            default: boolean;
        };
        input: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideOnSinglePage: {
            type: BooleanConstructor;
            default: boolean;
        };
        total: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        pageSize: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        boundaryIconLeft: {
            type: StringConstructor;
            default: string;
        };
        boundaryIconRight: {
            type: StringConstructor;
            default: string;
        };
        directionIconLeft: {
            type: StringConstructor;
            default: string;
        };
        directionIconRight: {
            type: StringConstructor;
            default: string;
        };
        gapped: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        activePageColor: {
            type: StringConstructor;
            default: string;
        };
        activeButtonProps: {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            default: () => {};
        };
        buttonProps: {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            default: () => {};
        };
        buttonsPreset: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToTheFirstPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToPreviousPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToSpecificPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToSpecificPageInputLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToNextPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToLastPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        input: boolean;
        size: "small" | "medium" | "large";
        modelValue: number;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        borderColor: string;
        disabled: boolean;
        ariaLabel: import("../../composables").TranslationProp;
        rounded: boolean;
        visiblePages: string | number;
        pages: string | number;
        boundaryLinks: boolean;
        boundaryNumbers: boolean;
        directionLinks: boolean;
        hideOnSinglePage: boolean;
        total: string | number;
        pageSize: string | number;
        boundaryIconLeft: string;
        boundaryIconRight: string;
        directionIconLeft: string;
        directionIconRight: string;
        gapped: boolean;
        activePageColor: string;
        activeButtonProps: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        buttonProps: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        buttonsPreset: string;
        ariaGoToTheFirstPageLabel: import("../../composables").TranslationProp;
        ariaGoToPreviousPageLabel: import("../../composables").TranslationProp;
        ariaGoToSpecificPageLabel: import("../../composables").TranslationProp;
        ariaGoToSpecificPageInputLabel: import("../../composables").TranslationProp;
        ariaGoToNextPageLabel: import("../../composables").TranslationProp;
        ariaGoToLastPageLabel: import("../../composables").TranslationProp;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        visiblePages: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        pages: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        boundaryLinks: {
            type: BooleanConstructor;
            default: boolean;
        };
        boundaryNumbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        directionLinks: {
            type: BooleanConstructor;
            default: boolean;
        };
        input: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideOnSinglePage: {
            type: BooleanConstructor;
            default: boolean;
        };
        total: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        pageSize: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        boundaryIconLeft: {
            type: StringConstructor;
            default: string;
        };
        boundaryIconRight: {
            type: StringConstructor;
            default: string;
        };
        directionIconLeft: {
            type: StringConstructor;
            default: string;
        };
        directionIconRight: {
            type: StringConstructor;
            default: string;
        };
        gapped: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        activePageColor: {
            type: StringConstructor;
            default: string;
        };
        activeButtonProps: {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            default: () => {};
        };
        buttonProps: {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            default: () => {};
        };
        buttonsPreset: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToTheFirstPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToPreviousPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToSpecificPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToSpecificPageInputLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToNextPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaGoToLastPageLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        goNextPage: () => void;
        goPrevPage: () => void;
    }, {}, {}, {}, {
        input: boolean;
        size: "small" | "medium" | "large";
        modelValue: number;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        borderColor: string;
        disabled: boolean;
        ariaLabel: import("../../composables").TranslationProp;
        rounded: boolean;
        visiblePages: string | number;
        pages: string | number;
        boundaryLinks: boolean;
        boundaryNumbers: boolean;
        directionLinks: boolean;
        hideOnSinglePage: boolean;
        total: string | number;
        pageSize: string | number;
        boundaryIconLeft: string;
        boundaryIconRight: string;
        directionIconLeft: string;
        directionIconRight: string;
        gapped: boolean;
        activePageColor: string;
        activeButtonProps: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        buttonProps: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        buttonsPreset: string;
        ariaGoToTheFirstPageLabel: import("../../composables").TranslationProp;
        ariaGoToPreviousPageLabel: import("../../composables").TranslationProp;
        ariaGoToSpecificPageLabel: import("../../composables").TranslationProp;
        ariaGoToSpecificPageInputLabel: import("../../composables").TranslationProp;
        ariaGoToNextPageLabel: import("../../composables").TranslationProp;
        ariaGoToLastPageLabel: import("../../composables").TranslationProp;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    pages: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    pageSize: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    gapped: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    activePageColor: {
        type: StringConstructor;
        default: string;
    };
    activeButtonProps: {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        default: () => {};
    };
    buttonProps: {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        default: () => {};
    };
    buttonsPreset: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToTheFirstPageLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToPreviousPageLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToSpecificPageLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToSpecificPageInputLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToNextPageLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaGoToLastPageLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    goNextPage: () => void;
    goPrevPage: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, {
    input: boolean;
    size: "small" | "medium" | "large";
    modelValue: number;
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    color: string;
    borderColor: string;
    disabled: boolean;
    ariaLabel: import("../../composables").TranslationProp;
    rounded: boolean;
    visiblePages: string | number;
    pages: string | number;
    boundaryLinks: boolean;
    boundaryNumbers: boolean;
    directionLinks: boolean;
    hideOnSinglePage: boolean;
    total: string | number;
    pageSize: string | number;
    boundaryIconLeft: string;
    boundaryIconRight: string;
    directionIconLeft: string;
    directionIconRight: string;
    gapped: boolean;
    activePageColor: string;
    activeButtonProps: NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        type: string;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: import("../../composables").ColorName;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: boolean;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        block: boolean;
        disabled: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        plain: boolean;
        round: boolean;
        iconRight: string;
        iconColor: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: "opacity" | "mask";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "opacity" | "mask";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly color: import("../../composables").ColorName;
        readonly textColor: string;
        readonly icon: string;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly tag: string;
        readonly sizesConfig: Record<string, any>;
        readonly fontSizesConfig: Record<string, any>;
        readonly loading: boolean;
        readonly block: boolean;
        readonly disabled: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly plain: boolean;
        readonly round: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "opacity" | "mask";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "opacity" | "mask";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: import("../../composables").PresetPropValue | undefined;
        readonly target?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly append?: boolean | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly href?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: import("vue").PropType<import("../../composables").ColorName>;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    buttonProps: NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        type: string;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: import("../../composables").ColorName;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: boolean;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        block: boolean;
        disabled: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        plain: boolean;
        round: boolean;
        iconRight: string;
        iconColor: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: "opacity" | "mask";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "opacity" | "mask";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly color: import("../../composables").ColorName;
        readonly textColor: string;
        readonly icon: string;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly tag: string;
        readonly sizesConfig: Record<string, any>;
        readonly fontSizesConfig: Record<string, any>;
        readonly loading: boolean;
        readonly block: boolean;
        readonly disabled: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly plain: boolean;
        readonly round: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "opacity" | "mask";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "opacity" | "mask";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: import("../../composables").PresetPropValue | undefined;
        readonly target?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly append?: boolean | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly href?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: import("vue").PropType<import("../../composables").ColorName>;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    buttonsPreset: string;
    ariaGoToTheFirstPageLabel: import("../../composables").TranslationProp;
    ariaGoToPreviousPageLabel: import("../../composables").TranslationProp;
    ariaGoToSpecificPageLabel: import("../../composables").TranslationProp;
    ariaGoToSpecificPageInputLabel: import("../../composables").TranslationProp;
    ariaGoToNextPageLabel: import("../../composables").TranslationProp;
    ariaGoToLastPageLabel: import("../../composables").TranslationProp;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        firstPageLink?(_: {
            onClick: () => void;
            disabled: boolean;
        }): any;
        prevPageLink?(_: {
            onClick: () => void;
            disabled: boolean;
        }): any;
        default?(_: {}): any;
        nextPageLink?(_: {
            onClick: () => void;
            disabled: boolean;
        }): any;
        lastPageLink?(_: {
            onClick: () => void;
            disabled: boolean;
        }): any;
    };
});
