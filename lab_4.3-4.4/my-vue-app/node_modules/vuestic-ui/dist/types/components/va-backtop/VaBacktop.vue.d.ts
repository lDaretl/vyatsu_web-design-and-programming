import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    target: {
        type: PropType<string | Element | undefined>;
        default: undefined;
    };
    visibilityHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    speed: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    verticalOffset: {
        type: StringConstructor;
        default: string;
    };
    horizontalOffset: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    horizontalPosition: {
        type: PropType<"right" | "left">;
        default: string;
        validator: (value: string) => boolean;
    };
    verticalPosition: {
        type: PropType<"top" | "bottom">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    target: {
        type: PropType<string | Element | undefined>;
        default: undefined;
    };
    visibilityHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    speed: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    verticalOffset: {
        type: StringConstructor;
        default: string;
    };
    horizontalOffset: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    horizontalPosition: {
        type: PropType<"right" | "left">;
        default: string;
        validator: (value: string) => boolean;
    };
    verticalPosition: {
        type: PropType<"top" | "bottom">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}>>, {
    preset: import("../../composables").PresetPropValue;
    target: string | Element | undefined;
    color: string;
    visibilityHeight: string | number;
    speed: string | number;
    verticalOffset: string;
    horizontalOffset: string;
    horizontalPosition: "right" | "left";
    verticalPosition: "top" | "bottom";
    ariaLabel: import("../../composables").TranslationProp;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
