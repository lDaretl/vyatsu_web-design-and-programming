export declare const VaDatePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<import("./types").DatePickerModelValue>;
        };
        monthNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        view: {
            type: import("vue").PropType<Partial<import("./types").DatePickerView>>;
        };
        type: {
            type: import("vue").PropType<import("./types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
            required: true;
            default: import("./types").DatePickerMode | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        highlightToday: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onHover:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedYears: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        startYear: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        endYear: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        "onHover:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedMonths: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        "onHover:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        firstWeekday: {
            type: import("vue").PropType<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>>;
            required: true;
            default: ("Monday" | "Sunday" | "monday" | "sunday") | undefined;
        };
        hideWeekDays: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        showOtherMonths: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        allowedDays: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        weekends: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        highlightWeekend: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:view": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaNextPeriodLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        ariaPreviousPeriodLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        ariaSwitchViewLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:prevButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:nextButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:middleButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        focus: () => any;
        focusCurrentPicker: () => any;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
        "update:view": (...args: any[]) => void;
        "hover:day": (...args: any[]) => void;
        "click:day": (...args: any[]) => void;
        "hover:month": (...args: any[]) => void;
        "click:month": (...args: any[]) => void;
        "hover:year": (...args: any[]) => void;
        "click:year": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<import("./types").DatePickerModelValue>;
        };
        monthNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        view: {
            type: import("vue").PropType<Partial<import("./types").DatePickerView>>;
        };
        type: {
            type: import("vue").PropType<import("./types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
            required: true;
            default: import("./types").DatePickerMode | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        highlightToday: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onHover:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedYears: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        startYear: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        endYear: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        "onHover:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedMonths: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        "onHover:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        firstWeekday: {
            type: import("vue").PropType<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>>;
            required: true;
            default: ("Monday" | "Sunday" | "monday" | "sunday") | undefined;
        };
        hideWeekDays: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        showOtherMonths: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        allowedDays: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        weekends: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        highlightWeekend: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:view": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaNextPeriodLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        ariaPreviousPeriodLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        ariaSwitchViewLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:prevButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:nextButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:middleButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        type: import("./types").DatePickerType;
        mode: NonNullable<import("./types").DatePickerMode | undefined>;
        "onUpdate:modelValue": (...args: any[]) => any;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        disabled: boolean;
        readonly: boolean;
        "child:prevButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:nextButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:middleButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "onUpdate:view": (...args: any[]) => any;
        monthNames: string[];
        ariaNextPeriodLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        ariaPreviousPeriodLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        ariaSwitchViewLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        "onHover:day": (...args: any[]) => any;
        "onClick:day": (...args: any[]) => any;
        weekdayNames: string[];
        firstWeekday: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>;
        hideWeekDays: NonNullable<boolean | undefined>;
        showOtherMonths: NonNullable<boolean | undefined>;
        allowedDays: (date: Date) => boolean;
        weekends: (date: Date) => boolean;
        highlightWeekend: NonNullable<boolean | undefined>;
        highlightToday: NonNullable<boolean | undefined>;
        "onHover:month": (...args: any[]) => any;
        "onClick:month": (...args: any[]) => any;
        allowedMonths: (date: Date) => boolean;
        "onHover:year": (...args: any[]) => any;
        "onClick:year": (...args: any[]) => any;
        allowedYears: (date: Date) => boolean;
        startYear: NonNullable<string | number | undefined>;
        endYear: NonNullable<string | number | undefined>;
        weekendsColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<import("./types").DatePickerModelValue>;
        };
        monthNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        view: {
            type: import("vue").PropType<Partial<import("./types").DatePickerView>>;
        };
        type: {
            type: import("vue").PropType<import("./types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
            required: true;
            default: import("./types").DatePickerMode | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        highlightToday: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onHover:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedYears: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        startYear: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        endYear: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        "onHover:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedMonths: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        "onHover:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        firstWeekday: {
            type: import("vue").PropType<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>>;
            required: true;
            default: ("Monday" | "Sunday" | "monday" | "sunday") | undefined;
        };
        hideWeekDays: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        showOtherMonths: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        allowedDays: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        weekends: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        highlightWeekend: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:view": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaNextPeriodLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        ariaPreviousPeriodLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        ariaSwitchViewLabel: {
            type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
            required: true;
            default: import("../../composables").TranslationProp | undefined;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:prevButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:nextButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:middleButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../composables").PresetPropValue;
                target: string;
                color: import("../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        focus: () => any;
        focusCurrentPicker: () => any;
    }, {}, {}, {}, {
        type: import("./types").DatePickerType;
        mode: NonNullable<import("./types").DatePickerMode | undefined>;
        "onUpdate:modelValue": (...args: any[]) => any;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        disabled: boolean;
        readonly: boolean;
        "child:prevButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:nextButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:middleButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "onUpdate:view": (...args: any[]) => any;
        monthNames: string[];
        ariaNextPeriodLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        ariaPreviousPeriodLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        ariaSwitchViewLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
        "onHover:day": (...args: any[]) => any;
        "onClick:day": (...args: any[]) => any;
        weekdayNames: string[];
        firstWeekday: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>;
        hideWeekDays: NonNullable<boolean | undefined>;
        showOtherMonths: NonNullable<boolean | undefined>;
        allowedDays: (date: Date) => boolean;
        weekends: (date: Date) => boolean;
        highlightWeekend: NonNullable<boolean | undefined>;
        highlightToday: NonNullable<boolean | undefined>;
        "onHover:month": (...args: any[]) => any;
        "onClick:month": (...args: any[]) => any;
        allowedMonths: (date: Date) => boolean;
        "onHover:year": (...args: any[]) => any;
        "onClick:year": (...args: any[]) => any;
        allowedYears: (date: Date) => boolean;
        startYear: NonNullable<string | number | undefined>;
        endYear: NonNullable<string | number | undefined>;
        weekendsColor: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<import("./types").DatePickerModelValue>;
    };
    monthNames: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    view: {
        type: import("vue").PropType<Partial<import("./types").DatePickerView>>;
    };
    type: {
        type: import("vue").PropType<import("./types").DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    mode: {
        type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
        required: true;
        default: import("./types").DatePickerMode | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    highlightToday: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onHover:year": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    endYear: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    "onHover:month": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:day": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    firstWeekday: {
        type: import("vue").PropType<NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>>;
        required: true;
        default: ("Monday" | "Sunday" | "monday" | "sunday") | undefined;
    };
    hideWeekDays: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    showOtherMonths: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    allowedDays: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:view": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaNextPeriodLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    ariaSwitchViewLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    "child:prevButton": {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        required: false;
        default: undefined;
    };
    "child:nextButton": {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        required: false;
        default: undefined;
    };
    "child:middleButton": {
        type: import("vue").PropType<NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../composables").PresetPropValue;
            target: string;
            color: import("../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
        required: false;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
}, {
    focus: () => any;
    focusCurrentPicker: () => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "update:view": (...args: any[]) => void;
    "hover:day": (...args: any[]) => void;
    "click:day": (...args: any[]) => void;
    "hover:month": (...args: any[]) => void;
    "click:month": (...args: any[]) => void;
    "hover:year": (...args: any[]) => void;
    "click:year": (...args: any[]) => void;
}, string, {
    type: import("./types").DatePickerType;
    mode: NonNullable<import("./types").DatePickerMode | undefined>;
    "onUpdate:modelValue": (...args: any[]) => any;
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    color: string;
    disabled: boolean;
    readonly: boolean;
    "child:prevButton": NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        type: string;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: import("../../composables").ColorName;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: boolean;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        block: boolean;
        disabled: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        plain: boolean;
        round: boolean;
        iconRight: string;
        iconColor: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: "opacity" | "mask";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "opacity" | "mask";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly color: import("../../composables").ColorName;
        readonly textColor: string;
        readonly icon: string;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly tag: string;
        readonly sizesConfig: Record<string, any>;
        readonly fontSizesConfig: Record<string, any>;
        readonly loading: boolean;
        readonly block: boolean;
        readonly disabled: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly plain: boolean;
        readonly round: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "opacity" | "mask";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "opacity" | "mask";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: import("../../composables").PresetPropValue | undefined;
        readonly target?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly append?: boolean | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly href?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: import("vue").PropType<import("../../composables").ColorName>;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    "child:nextButton": NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        type: string;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: import("../../composables").ColorName;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: boolean;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        block: boolean;
        disabled: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        plain: boolean;
        round: boolean;
        iconRight: string;
        iconColor: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: "opacity" | "mask";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "opacity" | "mask";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly color: import("../../composables").ColorName;
        readonly textColor: string;
        readonly icon: string;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly tag: string;
        readonly sizesConfig: Record<string, any>;
        readonly fontSizesConfig: Record<string, any>;
        readonly loading: boolean;
        readonly block: boolean;
        readonly disabled: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly plain: boolean;
        readonly round: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "opacity" | "mask";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "opacity" | "mask";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: import("../../composables").PresetPropValue | undefined;
        readonly target?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly append?: boolean | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly href?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: import("vue").PropType<import("../../composables").ColorName>;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    "child:middleButton": NonNullable<Partial<{
        size: "small" | "medium" | "large";
        replace: boolean;
        type: string;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: import("../../composables").ColorName;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: boolean;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        block: boolean;
        disabled: boolean;
        textOpacity: string | number;
        backgroundOpacity: string | number;
        plain: boolean;
        round: boolean;
        iconRight: string;
        iconColor: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: "opacity" | "mask";
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: "opacity" | "mask";
        hoverOpacity: string | number;
        hoverMaskColor: string;
    }> & Omit<{
        readonly size: "small" | "medium" | "large";
        readonly type: string;
        readonly color: import("../../composables").ColorName;
        readonly textColor: string;
        readonly icon: string;
        readonly borderColor: string;
        readonly gradient: boolean;
        readonly tag: string;
        readonly sizesConfig: Record<string, any>;
        readonly fontSizesConfig: Record<string, any>;
        readonly loading: boolean;
        readonly block: boolean;
        readonly disabled: boolean;
        readonly textOpacity: string | number;
        readonly backgroundOpacity: string | number;
        readonly plain: boolean;
        readonly round: boolean;
        readonly iconRight: string;
        readonly iconColor: string;
        readonly pressedBehavior: "opacity" | "mask";
        readonly pressedOpacity: number;
        readonly pressedMaskColor: string;
        readonly hoverBehavior: "opacity" | "mask";
        readonly hoverOpacity: string | number;
        readonly hoverMaskColor: string;
        readonly replace?: boolean | undefined;
        readonly preset?: import("../../composables").PresetPropValue | undefined;
        readonly target?: string | undefined;
        readonly to?: string | Record<string, any> | undefined;
        readonly append?: boolean | undefined;
        readonly exact?: boolean | undefined;
        readonly activeClass?: string | undefined;
        readonly exactActiveClass?: string | undefined;
        readonly href?: string | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: import("vue").PropType<import("../../composables").ColorName>;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: string;
        };
        textOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        backgroundOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        borderColor: {
            type: StringConstructor;
            default: string;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        round: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (v: string) => boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        pressedBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        pressedOpacity: {
            type: NumberConstructor;
            default: number;
        };
        pressedMaskColor: {
            type: StringConstructor;
            default: string;
        };
        hoverBehavior: {
            type: import("vue").PropType<"opacity" | "mask">;
            default: string;
            validator: (value: string) => boolean;
        };
        hoverOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        hoverMaskColor: {
            type: StringConstructor;
            default: string;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            default: () => import("../../services/global-config").SizeConfig;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
    "onUpdate:view": (...args: any[]) => any;
    monthNames: string[];
    ariaNextPeriodLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    ariaPreviousPeriodLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    ariaSwitchViewLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    "onHover:day": (...args: any[]) => any;
    "onClick:day": (...args: any[]) => any;
    weekdayNames: string[];
    firstWeekday: NonNullable<("Monday" | "Sunday" | "monday" | "sunday") | undefined>;
    hideWeekDays: NonNullable<boolean | undefined>;
    showOtherMonths: NonNullable<boolean | undefined>;
    allowedDays: (date: Date) => boolean;
    weekends: (date: Date) => boolean;
    highlightWeekend: NonNullable<boolean | undefined>;
    highlightToday: NonNullable<boolean | undefined>;
    "onHover:month": (...args: any[]) => any;
    "onClick:month": (...args: any[]) => any;
    allowedMonths: (date: Date) => boolean;
    "onHover:year": (...args: any[]) => any;
    "onClick:year": (...args: any[]) => any;
    allowedYears: (date: Date) => boolean;
    startYear: NonNullable<string | number | undefined>;
    endYear: NonNullable<string | number | undefined>;
    weekendsColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>>;
});
