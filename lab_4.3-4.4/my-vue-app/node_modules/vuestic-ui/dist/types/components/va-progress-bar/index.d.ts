export declare const VaProgressBar: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        buffer: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        reverse: {
            type: BooleanConstructor;
            default: boolean;
        };
        contentInside: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPercent: {
            type: BooleanConstructor;
            default: boolean;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        buffer: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        reverse: {
            type: BooleanConstructor;
            default: boolean;
        };
        contentInside: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPercent: {
            type: BooleanConstructor;
            default: boolean;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, {
        size: string | number;
        reverse: boolean;
        modelValue: string | number;
        preset: import("../../composables").PresetPropValue;
        color: string;
        max: string | number;
        ariaLabel: import("../../composables").TranslationProp;
        indeterminate: boolean;
        rounded: boolean;
        buffer: string | number;
        contentInside: boolean;
        showPercent: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        buffer: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        reverse: {
            type: BooleanConstructor;
            default: boolean;
        };
        contentInside: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPercent: {
            type: BooleanConstructor;
            default: boolean;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        size: string | number;
        reverse: boolean;
        modelValue: string | number;
        preset: import("../../composables").PresetPropValue;
        color: string;
        max: string | number;
        ariaLabel: import("../../composables").TranslationProp;
        indeterminate: boolean;
        rounded: boolean;
        buffer: string | number;
        contentInside: boolean;
        showPercent: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    buffer: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPercent: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    ariaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: string | number;
    reverse: boolean;
    modelValue: string | number;
    preset: import("../../composables").PresetPropValue;
    color: string;
    max: string | number;
    ariaLabel: import("../../composables").TranslationProp;
    indeterminate: boolean;
    rounded: boolean;
    buffer: string | number;
    contentInside: boolean;
    showPercent: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            value: string | number | undefined;
        }): any;
    };
});
