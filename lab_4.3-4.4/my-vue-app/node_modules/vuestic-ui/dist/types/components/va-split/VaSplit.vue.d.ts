import { PropType } from 'vue';
import { SplitLimit, SnappingMark } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    maximization: {
        type: BooleanConstructor;
        default: boolean;
    };
    maximizeStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    limits: {
        type: PropType<[SplitLimit, SplitLimit]>;
        default: () => number[];
    };
    snapping: {
        type: PropType<SnappingMark[]>;
        default: undefined;
    };
    snappingRange: {
        type: PropType<string | number>;
        default: number;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    maximization: {
        type: BooleanConstructor;
        default: boolean;
    };
    maximizeStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    limits: {
        type: PropType<[SplitLimit, SplitLimit]>;
        default: () => number[];
    };
    snapping: {
        type: PropType<SnappingMark[]>;
        default: undefined;
    };
    snappingRange: {
        type: PropType<string | number>;
        default: number;
    };
    ariaLabel: {
        type: PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    vertical: boolean;
    disabled: boolean;
    ariaLabel: import("../../composables").TranslationProp;
    maximization: boolean;
    maximizeStart: boolean;
    limits: [SplitLimit, SplitLimit];
    snapping: SnappingMark[];
    snappingRange: string | number;
}, {}>, {
    start?(_: {
        containerSize: any;
    }): any;
    grabber?(_: {}): any;
    end?(_: {
        containerSize: any;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
