import { type PropType } from 'vue';
import { StringWithAutocomplete } from '../../utils/types/prop-type';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    ratio: {
        type: PropType<number | StringWithAutocomplete<"auto">>;
        default: string;
    };
    contentHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    contentWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    maxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (v: number) => boolean;
    };
    preset: {
        type: PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    ratio: {
        type: PropType<number | StringWithAutocomplete<"auto">>;
        default: string;
    };
    contentHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    contentWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    maxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (v: number) => boolean;
    };
    preset: {
        type: PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}>>, {
    preset: import("../../composables").PresetPropValue;
    ratio: number | StringWithAutocomplete<"auto">;
    contentHeight: string | number;
    contentWidth: string | number;
    maxWidth: string | number;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
