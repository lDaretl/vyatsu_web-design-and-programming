export { VaRatingItem } from './components/VaRatingItem';
export declare const VaRating: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        numbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        halves: {
            type: BooleanConstructor;
            default: boolean;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        texts: {
            type: import("vue").PropType<string[]>;
            default: () => never[];
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaItemLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        icon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hover: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        tabindex: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        unselectedColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onHover: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        halfIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        emptyIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        numbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        halves: {
            type: BooleanConstructor;
            default: boolean;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        texts: {
            type: import("vue").PropType<string[]>;
            default: () => never[];
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaItemLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        icon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hover: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        tabindex: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        unselectedColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onHover: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        halfIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        emptyIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        onClick: (...args: any[]) => any;
        size: NonNullable<string | number | undefined>;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: number;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        icon: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        disabled: NonNullable<boolean | undefined>;
        max: string | number;
        ariaLabel: import("../../composables").TranslationProp;
        hover: NonNullable<boolean | undefined>;
        readonly: NonNullable<boolean | undefined>;
        tabindex: NonNullable<string | number | undefined>;
        clearable: boolean;
        unselectedColor: string;
        onHover: (...args: any[]) => any;
        halfIcon: string;
        emptyIcon: string;
        halves: boolean;
        numbers: boolean;
        texts: string[];
        ariaItemLabel: import("../../composables").TranslationProp;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        numbers: {
            type: BooleanConstructor;
            default: boolean;
        };
        halves: {
            type: BooleanConstructor;
            default: boolean;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        texts: {
            type: import("vue").PropType<string[]>;
            default: () => never[];
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        ariaItemLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        icon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hover: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        tabindex: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        unselectedColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onHover: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        halfIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        emptyIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        onClick: (...args: any[]) => any;
        size: NonNullable<string | number | undefined>;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: number;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        icon: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        disabled: NonNullable<boolean | undefined>;
        max: string | number;
        ariaLabel: import("../../composables").TranslationProp;
        hover: NonNullable<boolean | undefined>;
        readonly: NonNullable<boolean | undefined>;
        tabindex: NonNullable<string | number | undefined>;
        clearable: boolean;
        unselectedColor: string;
        onHover: (...args: any[]) => any;
        halfIcon: string;
        emptyIcon: string;
        halves: boolean;
        numbers: boolean;
        texts: string[];
        ariaItemLabel: import("../../composables").TranslationProp;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    numbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    texts: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    ariaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    ariaItemLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
    onClick: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    size: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    disabled: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hover: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    tabindex: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    unselectedColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    onHover: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    halfIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    emptyIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, {
    onClick: (...args: any[]) => any;
    size: NonNullable<string | number | undefined>;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: number;
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    color: string;
    icon: string;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    disabled: NonNullable<boolean | undefined>;
    max: string | number;
    ariaLabel: import("../../composables").TranslationProp;
    hover: NonNullable<boolean | undefined>;
    readonly: NonNullable<boolean | undefined>;
    tabindex: NonNullable<string | number | undefined>;
    clearable: boolean;
    unselectedColor: string;
    onHover: (...args: any[]) => any;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
    numbers: boolean;
    texts: string[];
    ariaItemLabel: import("../../composables").TranslationProp;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        item?(_: {
            value: number;
            onClick: () => void;
            index: number;
        }): any;
    };
});
