import { App } from 'vue';
declare const createVaModalPlugin: (app: App<any>) => {
    init(options: string | Partial<Omit<Partial<{
        title: string;
        blur: boolean;
        size: import("../../../utils/types/prop-type").StringWithAutocomplete<"small" | "auto" | "medium" | "large">;
        modelValue: boolean;
        stateful: boolean;
        maxWidth: string;
        sizesConfig: Record<string, any>;
        closeButton: boolean;
        "child:cancelButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:okButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:closeButton": NonNullable<Partial<{
            size: string | number;
            preset: import("../../../composables").PresetPropValue;
            name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            flip: "off" | "horizontal" | "vertical" | "both";
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            readonly flip: "off" | "horizontal" | "vertical" | "both";
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly color?: string | undefined;
            readonly tag?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("../../../utils/types/prop-type").AnyStringPropType<import("../..").VaIconName>;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "flip" | "sizesConfig" | "fontSizesConfig">>;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: import("../../../composables").TranslationProp;
        cancelText: import("../../../composables").TranslationProp;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
        zIndex: string | number;
        backgroundColor: string;
        noPadding: boolean;
        ariaCloseLabel: import("../../../composables").TranslationProp;
    }> & Omit<{
        readonly title: string;
        readonly blur: boolean;
        readonly size: import("../../../utils/types/prop-type").StringWithAutocomplete<"small" | "auto" | "medium" | "large">;
        readonly modelValue: boolean;
        readonly stateful: boolean;
        readonly maxWidth: string;
        readonly sizesConfig: Record<string, any>;
        readonly closeButton: boolean;
        readonly attachElement: string;
        readonly allowBodyScroll: boolean;
        readonly disableAttachment: boolean;
        readonly message: string;
        readonly okText: import("../../../composables").TranslationProp;
        readonly cancelText: import("../../../composables").TranslationProp;
        readonly hideDefaultActions: boolean;
        readonly fullscreen: boolean;
        readonly mobileFullscreen: boolean;
        readonly noDismiss: boolean;
        readonly noOutsideDismiss: boolean;
        readonly noEscDismiss: boolean;
        readonly maxHeight: string;
        readonly fixedLayout: boolean;
        readonly withoutTransitions: boolean;
        readonly overlay: boolean;
        readonly overlayOpacity: string | number;
        readonly showNestedOverlay: boolean;
        readonly backgroundColor: string;
        readonly noPadding: boolean;
        readonly ariaCloseLabel: import("../../../composables").TranslationProp;
        readonly "child:cancelButton"?: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
        readonly "child:okButton"?: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
        readonly "child:closeButton"?: NonNullable<Partial<{
            size: string | number;
            preset: import("../../../composables").PresetPropValue;
            name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            flip: "off" | "horizontal" | "vertical" | "both";
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            readonly flip: "off" | "horizontal" | "vertical" | "both";
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly color?: string | undefined;
            readonly tag?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("../../../utils/types/prop-type").AnyStringPropType<import("../..").VaIconName>;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "flip" | "sizesConfig" | "fontSizesConfig">> | undefined;
        readonly anchorClass?: string | undefined;
        readonly zIndex?: string | number | undefined;
        readonly beforeClose?: ((hide: () => void) => any) | undefined;
        readonly beforeOk?: ((hide: () => void) => any) | undefined;
        readonly beforeCancel?: ((hide: () => void) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        cancelText: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../../utils/types/prop-type").StringWithAutocomplete<"small" | "auto" | "medium" | "large">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:cancelButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../../composables").PresetPropValue;
                target: string;
                color: import("../../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:okButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../../composables").PresetPropValue;
                target: string;
                color: import("../../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:closeButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: string | number;
                preset: import("../../../composables").PresetPropValue;
                name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
                flip: "off" | "horizontal" | "vertical" | "both";
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
            }> & Omit<{
                readonly size: string | number;
                readonly name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
                readonly flip: "off" | "horizontal" | "vertical" | "both";
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly preset?: import("../../../composables").PresetPropValue | undefined;
                readonly color?: string | undefined;
                readonly tag?: string | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("../../../utils/types/prop-type").AnyStringPropType<import("../..").VaIconName>;
                    default: string;
                };
                tag: {
                    type: StringConstructor;
                };
                component: {
                    type: import("vue").PropType<any>;
                };
                color: {
                    type: StringConstructor;
                };
                rotation: {
                    type: (StringConstructor | NumberConstructor)[];
                };
                spin: {
                    type: (BooleanConstructor | StringConstructor)[];
                };
                flip: {
                    type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                preset: {
                    type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                    default: undefined;
                };
                size: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                    validator: (size: string | number) => boolean;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
            }>>, "size" | "preset" | "name" | "flip" | "sizesConfig" | "fontSizesConfig">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    }, "title" | "blur" | "size" | "modelValue" | "stateful" | "maxWidth" | "sizesConfig" | "closeButton" | "child:cancelButton" | "child:okButton" | "child:closeButton" | "attachElement" | "allowBodyScroll" | "disableAttachment" | "message" | "okText" | "cancelText" | "hideDefaultActions" | "fullscreen" | "mobileFullscreen" | "noDismiss" | "noOutsideDismiss" | "noEscDismiss" | "maxHeight" | "fixedLayout" | "withoutTransitions" | "overlay" | "overlayOpacity" | "showNestedOverlay" | "zIndex" | "backgroundColor" | "noPadding" | "ariaCloseLabel"> & import("../types").ModalEmits, "anchorClass">>): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    confirm(options: string | Partial<Omit<Partial<{
        title: string;
        blur: boolean;
        size: import("../../../utils/types/prop-type").StringWithAutocomplete<"small" | "auto" | "medium" | "large">;
        modelValue: boolean;
        stateful: boolean;
        maxWidth: string;
        sizesConfig: Record<string, any>;
        closeButton: boolean;
        "child:cancelButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:okButton": NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>;
        "child:closeButton": NonNullable<Partial<{
            size: string | number;
            preset: import("../../../composables").PresetPropValue;
            name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            flip: "off" | "horizontal" | "vertical" | "both";
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            readonly flip: "off" | "horizontal" | "vertical" | "both";
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly color?: string | undefined;
            readonly tag?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("../../../utils/types/prop-type").AnyStringPropType<import("../..").VaIconName>;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "flip" | "sizesConfig" | "fontSizesConfig">>;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: import("../../../composables").TranslationProp;
        cancelText: import("../../../composables").TranslationProp;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
        zIndex: string | number;
        backgroundColor: string;
        noPadding: boolean;
        ariaCloseLabel: import("../../../composables").TranslationProp;
    }> & Omit<{
        readonly title: string;
        readonly blur: boolean;
        readonly size: import("../../../utils/types/prop-type").StringWithAutocomplete<"small" | "auto" | "medium" | "large">;
        readonly modelValue: boolean;
        readonly stateful: boolean;
        readonly maxWidth: string;
        readonly sizesConfig: Record<string, any>;
        readonly closeButton: boolean;
        readonly attachElement: string;
        readonly allowBodyScroll: boolean;
        readonly disableAttachment: boolean;
        readonly message: string;
        readonly okText: import("../../../composables").TranslationProp;
        readonly cancelText: import("../../../composables").TranslationProp;
        readonly hideDefaultActions: boolean;
        readonly fullscreen: boolean;
        readonly mobileFullscreen: boolean;
        readonly noDismiss: boolean;
        readonly noOutsideDismiss: boolean;
        readonly noEscDismiss: boolean;
        readonly maxHeight: string;
        readonly fixedLayout: boolean;
        readonly withoutTransitions: boolean;
        readonly overlay: boolean;
        readonly overlayOpacity: string | number;
        readonly showNestedOverlay: boolean;
        readonly backgroundColor: string;
        readonly noPadding: boolean;
        readonly ariaCloseLabel: import("../../../composables").TranslationProp;
        readonly "child:cancelButton"?: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
        readonly "child:okButton"?: NonNullable<Partial<{
            size: "small" | "medium" | "large";
            replace: boolean;
            type: string;
            preset: import("../../../composables").PresetPropValue;
            target: string;
            color: import("../../../composables").ColorName;
            textColor: string;
            icon: string;
            borderColor: string;
            gradient: boolean;
            tag: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            loading: boolean;
            block: boolean;
            disabled: boolean;
            textOpacity: string | number;
            backgroundOpacity: string | number;
            plain: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            to: string | Record<string, any>;
            append: boolean;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            pressedBehavior: "opacity" | "mask";
            pressedOpacity: number;
            pressedMaskColor: string;
            hoverBehavior: "opacity" | "mask";
            hoverOpacity: string | number;
            hoverMaskColor: string;
        }> & Omit<{
            readonly size: "small" | "medium" | "large";
            readonly type: string;
            readonly color: import("../../../composables").ColorName;
            readonly textColor: string;
            readonly icon: string;
            readonly borderColor: string;
            readonly gradient: boolean;
            readonly tag: string;
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly loading: boolean;
            readonly block: boolean;
            readonly disabled: boolean;
            readonly textOpacity: string | number;
            readonly backgroundOpacity: string | number;
            readonly plain: boolean;
            readonly round: boolean;
            readonly iconRight: string;
            readonly iconColor: string;
            readonly pressedBehavior: "opacity" | "mask";
            readonly pressedOpacity: number;
            readonly pressedMaskColor: string;
            readonly hoverBehavior: "opacity" | "mask";
            readonly hoverOpacity: string | number;
            readonly hoverMaskColor: string;
            readonly replace?: boolean | undefined;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly target?: string | undefined;
            readonly to?: string | Record<string, any> | undefined;
            readonly append?: boolean | undefined;
            readonly exact?: boolean | undefined;
            readonly activeClass?: string | undefined;
            readonly exactActiveClass?: string | undefined;
            readonly href?: string | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: import("vue").PropType<import("../../../composables").ColorName>;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            backgroundOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: undefined;
            };
            replace: {
                type: BooleanConstructor;
                default: undefined;
            };
            append: {
                type: BooleanConstructor;
                default: undefined;
            };
            exact: {
                type: BooleanConstructor;
                default: undefined;
            };
            activeClass: {
                type: StringConstructor;
                default: undefined;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: undefined;
            };
            href: {
                type: StringConstructor;
                default: undefined;
            };
            target: {
                type: StringConstructor;
                default: undefined;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"opacity" | "mask">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
        }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
        readonly "child:closeButton"?: NonNullable<Partial<{
            size: string | number;
            preset: import("../../../composables").PresetPropValue;
            name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            flip: "off" | "horizontal" | "vertical" | "both";
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
        }> & Omit<{
            readonly size: string | number;
            readonly name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
            readonly flip: "off" | "horizontal" | "vertical" | "both";
            readonly sizesConfig: Record<string, any>;
            readonly fontSizesConfig: Record<string, any>;
            readonly preset?: import("../../../composables").PresetPropValue | undefined;
            readonly color?: string | undefined;
            readonly tag?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("../../../utils/types/prop-type").AnyStringPropType<import("../..").VaIconName>;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (BooleanConstructor | StringConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../../services/global-config").SizeConfig;
            };
        }>>, "size" | "preset" | "name" | "flip" | "sizesConfig" | "fontSizesConfig">> | undefined;
        readonly anchorClass?: string | undefined;
        readonly zIndex?: string | number | undefined;
        readonly beforeClose?: ((hide: () => void) => any) | undefined;
        readonly beforeOk?: ((hide: () => void) => any) | undefined;
        readonly beforeCancel?: ((hide: () => void) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        cancelText: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../../utils/types/prop-type").StringWithAutocomplete<"small" | "auto" | "medium" | "large">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../../composables").TranslationProp>;
            default: import("../../../composables").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        "child:cancelButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../../composables").PresetPropValue;
                target: string;
                color: import("../../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:okButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: "small" | "medium" | "large";
                replace: boolean;
                type: string;
                preset: import("../../../composables").PresetPropValue;
                target: string;
                color: import("../../../composables").ColorName;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                loading: boolean;
                block: boolean;
                disabled: boolean;
                textOpacity: string | number;
                backgroundOpacity: string | number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: string | number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly size: "small" | "medium" | "large";
                readonly type: string;
                readonly color: import("../../../composables").ColorName;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly block: boolean;
                readonly disabled: boolean;
                readonly textOpacity: string | number;
                readonly backgroundOpacity: string | number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: string | number;
                readonly hoverMaskColor: string;
                readonly replace?: boolean | undefined;
                readonly preset?: import("../../../composables").PresetPropValue | undefined;
                readonly target?: string | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: import("vue").PropType<import("../../../composables").ColorName>;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                backgroundOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                preset: {
                    type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                    default: undefined;
                };
            }>>, "size" | "replace" | "type" | "preset" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "sizesConfig" | "fontSizesConfig" | "loading" | "block" | "disabled" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">>>;
            required: false;
            default: undefined;
        };
        "child:closeButton": {
            type: import("vue").PropType<NonNullable<Partial<{
                size: string | number;
                preset: import("../../../composables").PresetPropValue;
                name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
                flip: "off" | "horizontal" | "vertical" | "both";
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
            }> & Omit<{
                readonly size: string | number;
                readonly name: import("../../../utils/types/prop-type").StringWithAutocomplete<import("../..").VaIconName>;
                readonly flip: "off" | "horizontal" | "vertical" | "both";
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly preset?: import("../../../composables").PresetPropValue | undefined;
                readonly color?: string | undefined;
                readonly tag?: string | undefined;
                readonly component?: any;
                readonly rotation?: string | number | undefined;
                readonly spin?: string | boolean | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("../../../utils/types/prop-type").AnyStringPropType<import("../..").VaIconName>;
                    default: string;
                };
                tag: {
                    type: StringConstructor;
                };
                component: {
                    type: import("vue").PropType<any>;
                };
                color: {
                    type: StringConstructor;
                };
                rotation: {
                    type: (StringConstructor | NumberConstructor)[];
                };
                spin: {
                    type: (BooleanConstructor | StringConstructor)[];
                };
                flip: {
                    type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                preset: {
                    type: import("vue").PropType<import("../../../composables").PresetPropValue>;
                    default: undefined;
                };
                size: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                    validator: (size: string | number) => boolean;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../../../services/global-config").SizeConfig;
                };
            }>>, "size" | "preset" | "name" | "flip" | "sizesConfig" | "fontSizesConfig">>>;
            required: false;
            default: undefined;
        };
    }>> & {
        onCancel?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    }, "title" | "blur" | "size" | "modelValue" | "stateful" | "maxWidth" | "sizesConfig" | "closeButton" | "child:cancelButton" | "child:okButton" | "child:closeButton" | "attachElement" | "allowBodyScroll" | "disableAttachment" | "message" | "okText" | "cancelText" | "hideDefaultActions" | "fullscreen" | "mobileFullscreen" | "noDismiss" | "noOutsideDismiss" | "noEscDismiss" | "maxHeight" | "fixedLayout" | "withoutTransitions" | "overlay" | "overlayOpacity" | "showNestedOverlay" | "zIndex" | "backgroundColor" | "noPadding" | "ariaCloseLabel"> & import("../types").ModalEmits, "anchorClass">>): Promise<boolean>;
};
export declare const VaModalPlugin: import("../../../services/vue-plugin/types").VuesticPluginFabric<[]>;
declare module 'vue' {
    interface ComponentCustomProperties {
        $vaModal: ReturnType<typeof createVaModalPlugin>;
    }
}
export {};
