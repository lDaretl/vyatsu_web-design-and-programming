export declare const VaOptionList: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"switch" | "checkbox" | "radio">;
            default: string;
            validator: (type: any) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultValue: {
            type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: import("vue").PropType<import("..").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:error"?: ((...args: any[]) => any) | undefined;
        "onUpdate:errorMessages"?: ((...args: any[]) => any) | undefined;
        "onUpdate:dirty"?: ((...args: any[]) => any) | undefined;
    }, {
        focus: () => void;
        reset: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        clear: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
        "update:error": (...args: any[]) => void;
        "update:errorMessages": (...args: any[]) => void;
        "update:dirty": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"switch" | "checkbox" | "radio">;
            default: string;
            validator: (type: any) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultValue: {
            type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: import("vue").PropType<import("..").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:error"?: ((...args: any[]) => any) | undefined;
        "onUpdate:errorMessages"?: ((...args: any[]) => any) | undefined;
        "onUpdate:dirty"?: ((...args: any[]) => any) | undefined;
    }, {
        error: boolean;
        type: "switch" | "checkbox" | "radio";
        options: import("..").SelectOption[];
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        name: string;
        success: boolean;
        disabled: boolean;
        readonly: boolean;
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
        leftLabel: boolean;
        rules: import("../../composables").ValidationRule<any>[];
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        messages: string | string[];
        immediateValidation: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"switch" | "checkbox" | "radio">;
            default: string;
            validator: (type: any) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultValue: {
            type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: import("vue").PropType<import("..").SelectOption[]>;
            default: () => never[];
        };
        textBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        valueBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        trackBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        disabledBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        groupBy: {
            type: import("vue").PropType<import("../../composables").StringOrFunction>;
            default: string;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:error"?: ((...args: any[]) => any) | undefined;
        "onUpdate:errorMessages"?: ((...args: any[]) => any) | undefined;
        "onUpdate:dirty"?: ((...args: any[]) => any) | undefined;
    }, {
        focus: () => void;
        reset: () => void;
    }, {}, {}, {}, {
        error: boolean;
        type: "switch" | "checkbox" | "radio";
        options: import("..").SelectOption[];
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        color: string;
        name: string;
        success: boolean;
        disabled: boolean;
        readonly: boolean;
        textBy: import("../../composables").StringOrFunction;
        valueBy: import("../../composables").StringOrFunction;
        trackBy: import("../../composables").StringOrFunction;
        disabledBy: import("../../composables").StringOrFunction;
        groupBy: import("../../composables").StringOrFunction;
        leftLabel: boolean;
        rules: import("../../composables").ValidationRule<any>[];
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        messages: string | string[];
        immediateValidation: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: import("vue").PropType<"switch" | "checkbox" | "radio">;
        default: string;
        validator: (type: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultValue: {
        type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<import("..").SelectOption | import("..").SelectOption[]>;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<import("..").SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: import("vue").PropType<import("../../composables").StringOrFunction>;
        default: string;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:error"?: ((...args: any[]) => any) | undefined;
    "onUpdate:errorMessages"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dirty"?: ((...args: any[]) => any) | undefined;
}, {
    focus: () => void;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    clear: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
    "update:error": (...args: any[]) => void;
    "update:errorMessages": (...args: any[]) => void;
    "update:dirty": (...args: any[]) => void;
}, string, {
    error: boolean;
    type: "switch" | "checkbox" | "radio";
    options: import("..").SelectOption[];
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    color: string;
    name: string;
    success: boolean;
    disabled: boolean;
    readonly: boolean;
    textBy: import("../../composables").StringOrFunction;
    valueBy: import("../../composables").StringOrFunction;
    trackBy: import("../../composables").StringOrFunction;
    disabledBy: import("../../composables").StringOrFunction;
    groupBy: import("../../composables").StringOrFunction;
    leftLabel: boolean;
    rules: import("../../composables").ValidationRule<any>[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            option: import("..").SelectOption;
            selectedValue: import("..").SelectOption | import("..").SelectOption[];
            isDisabled: (option: import("..").SelectOption) => boolean;
            getText: (option: import("..").SelectOption) => string;
            getValue: (option: import("..").SelectOption) => any;
        }): any;
    };
});
