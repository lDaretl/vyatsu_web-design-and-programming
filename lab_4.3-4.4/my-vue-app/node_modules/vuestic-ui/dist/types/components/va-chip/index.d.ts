export declare const VaChip: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeable: {
            type: BooleanConstructor;
            default: boolean;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        close: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        focus: (...args: any[]) => void;
        "update:modelValue": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeable: {
            type: BooleanConstructor;
            default: boolean;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        size: "small" | "medium" | "large";
        flat: boolean;
        replace: boolean;
        modelValue: boolean;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: string;
        icon: string;
        closeable: boolean;
        outline: boolean;
        tag: string;
        shadow: boolean;
        disabled: boolean;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        ariaCloseLabel: import("../../composables").TranslationProp;
        square: boolean;
        readonly: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeable: {
            type: BooleanConstructor;
            default: boolean;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaCloseLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        preset: {
            type: import("vue").PropType<import("../../composables").PresetPropValue>;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        close: () => void;
    }, {}, {}, {}, {
        size: "small" | "medium" | "large";
        flat: boolean;
        replace: boolean;
        modelValue: boolean;
        stateful: boolean;
        preset: import("../../composables").PresetPropValue;
        target: string;
        color: string;
        icon: string;
        closeable: boolean;
        outline: boolean;
        tag: string;
        shadow: boolean;
        disabled: boolean;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        ariaCloseLabel: import("../../composables").TranslationProp;
        square: boolean;
        readonly: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaCloseLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    close: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    focus: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
}, string, {
    size: "small" | "medium" | "large";
    flat: boolean;
    replace: boolean;
    modelValue: boolean;
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    target: string;
    color: string;
    icon: string;
    closeable: boolean;
    outline: boolean;
    tag: string;
    shadow: boolean;
    disabled: boolean;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    ariaCloseLabel: import("../../composables").TranslationProp;
    square: boolean;
    readonly: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
