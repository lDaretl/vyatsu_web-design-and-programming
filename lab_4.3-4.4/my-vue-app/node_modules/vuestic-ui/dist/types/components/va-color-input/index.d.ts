export declare const VaColorInput: import("vue").DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicator: {
        type: import("vue").PropType<"square" | "dot">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaOpenColorPickerLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    error: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    type: {
        type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    name: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: import("vue").PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    success: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    pattern: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
        required: true;
        default: import("../../composables").ValidationRule<string>[] | undefined;
    };
    dirty: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    errorMessages: {
        type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
        required: true;
        default: string | string[] | undefined;
    };
    errorCount: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    messages: {
        type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
        required: true;
        default: string | string[] | undefined;
    };
    immediateValidation: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    requiredMark: {
        type: import("vue").PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    maxLength: {
        type: import("vue").PropType<NonNullable<NonNullable<string | number | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | number | undefined> | undefined;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: import("vue").PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    inputAriaLabel: {
        type: import("vue").PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    inputAriaLabelledby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    tabindex: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    inputClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputmode: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    autocomplete: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaResetLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    strictBindInputValue: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    clearable: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    clearableIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearValue: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    autofocus: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicator: {
        type: import("vue").PropType<"square" | "dot">;
        default: string;
        validator: (value: string) => boolean;
    };
    ariaOpenColorPickerLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    preset: {
        type: import("vue").PropType<import("../../composables").PresetPropValue>;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    error: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    type: {
        type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    name: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: import("vue").PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    success: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    pattern: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<string>[]>;
        required: true;
        default: import("../../composables").ValidationRule<string>[] | undefined;
    };
    dirty: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    errorMessages: {
        type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
        required: true;
        default: string | string[] | undefined;
    };
    errorCount: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    messages: {
        type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
        required: true;
        default: string | string[] | undefined;
    };
    immediateValidation: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    requiredMark: {
        type: import("vue").PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    maxLength: {
        type: import("vue").PropType<NonNullable<NonNullable<string | number | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | number | undefined> | undefined;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: import("vue").PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    inputAriaLabel: {
        type: import("vue").PropType<NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../../composables").TranslationProp | undefined> | undefined;
    };
    inputAriaLabelledby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    tabindex: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    inputClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputmode: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    autocomplete: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaResetLabel: {
        type: import("vue").PropType<NonNullable<import("../../composables").TranslationProp | undefined>>;
        required: true;
        default: import("../../composables").TranslationProp | undefined;
    };
    strictBindInputValue: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    clearable: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    clearableIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearValue: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    autofocus: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    error: NonNullable<boolean | undefined>;
    onClick: (...args: any[]) => any;
    type: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined>;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: string;
    stateful: boolean;
    preset: import("../../composables").PresetPropValue;
    color: string;
    name: string;
    loading: NonNullable<NonNullable<boolean | undefined> | undefined>;
    success: NonNullable<boolean | undefined>;
    disabled: boolean;
    readonly: NonNullable<boolean | undefined>;
    pattern: string;
    rules: import("../../composables").ValidationRule<string>[];
    dirty: NonNullable<boolean | undefined>;
    errorMessages: NonNullable<string | string[] | undefined>;
    errorCount: NonNullable<string | number | undefined>;
    messages: NonNullable<string | string[] | undefined>;
    immediateValidation: NonNullable<boolean | undefined>;
    requiredMark: NonNullable<NonNullable<boolean | undefined> | undefined>;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: NonNullable<boolean | undefined>;
    maxLength: NonNullable<NonNullable<string | number | undefined> | undefined>;
    placeholder: string;
    background: string;
    innerLabel: NonNullable<NonNullable<boolean | undefined> | undefined>;
    inputAriaLabel: NonNullable<NonNullable<import("../../composables").TranslationProp | undefined> | undefined>;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    tabindex: NonNullable<string | number | undefined>;
    inputClass: string;
    inputmode: string;
    autocomplete: string;
    ariaResetLabel: NonNullable<import("../../composables").TranslationProp | undefined>;
    strictBindInputValue: NonNullable<boolean | undefined>;
    clearable: NonNullable<boolean | undefined>;
    clearableIcon: string;
    clearValue: string;
    autofocus: NonNullable<boolean | undefined>;
    indicator: "square" | "dot";
    ariaOpenColorPickerLabel: import("../../composables").TranslationProp;
}, {}>;
