export declare const VaButtonDropdown: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        openedIcon: {
            type: StringConstructor;
            default: string;
        };
        hideIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableDropdown: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<number | [number, number]>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
        };
        splitTo: {
            type: StringConstructor;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<"small" | "medium" | "large" | undefined>>;
            required: true;
            default: "small" | "medium" | "large" | undefined;
        };
        replace: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        type: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        preset: {
            type: import("vue").PropType<NonNullable<import("../../composables").PresetPropValue | undefined>>;
            required: true;
            default: import("../../composables").PresetPropValue | undefined;
        };
        color: {
            type: import("vue").PropType<NonNullable<import("../../composables").ColorName | undefined>>;
            required: true;
            default: import("../../composables").ColorName | undefined;
        };
        textColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        borderColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        gradient: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        tag: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        textOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        backgroundOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        plain: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        round: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        to: {
            type: import("vue").PropType<NonNullable<string | Record<string, any> | undefined>>;
            required: true;
            default: string | Record<string, any> | undefined;
        };
        append: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        exact: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        activeClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        exactActiveClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        href: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        pressedBehavior: {
            type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
            required: true;
            default: "opacity" | "mask" | undefined;
        };
        pressedOpacity: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        pressedMaskColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        hoverBehavior: {
            type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
            required: true;
            default: "opacity" | "mask" | undefined;
        };
        hoverOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverMaskColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
    }>>, {
        hideDropdown: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        openedIcon: {
            type: StringConstructor;
            default: string;
        };
        hideIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableDropdown: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<number | [number, number]>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
        };
        splitTo: {
            type: StringConstructor;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<"small" | "medium" | "large" | undefined>>;
            required: true;
            default: "small" | "medium" | "large" | undefined;
        };
        replace: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        type: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        preset: {
            type: import("vue").PropType<NonNullable<import("../../composables").PresetPropValue | undefined>>;
            required: true;
            default: import("../../composables").PresetPropValue | undefined;
        };
        color: {
            type: import("vue").PropType<NonNullable<import("../../composables").ColorName | undefined>>;
            required: true;
            default: import("../../composables").ColorName | undefined;
        };
        textColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        borderColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        gradient: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        tag: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        textOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        backgroundOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        plain: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        round: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        to: {
            type: import("vue").PropType<NonNullable<string | Record<string, any> | undefined>>;
            required: true;
            default: string | Record<string, any> | undefined;
        };
        append: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        exact: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        activeClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        exactActiveClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        href: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        pressedBehavior: {
            type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
            required: true;
            default: "opacity" | "mask" | undefined;
        };
        pressedOpacity: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        pressedMaskColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        hoverBehavior: {
            type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
            required: true;
            default: "opacity" | "mask" | undefined;
        };
        hoverOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverMaskColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
    }>>, {
        onClose: (...args: any[]) => any;
        size: NonNullable<"small" | "medium" | "large" | undefined>;
        replace: NonNullable<boolean | undefined>;
        split: boolean;
        anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        type: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: boolean;
        stateful: boolean;
        preset: NonNullable<import("../../composables").PresetPropValue | undefined>;
        target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        color: NonNullable<import("../../composables").ColorName | undefined>;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: NonNullable<boolean | undefined>;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        disabled: boolean;
        textOpacity: NonNullable<string | number | undefined>;
        backgroundOpacity: NonNullable<string | number | undefined>;
        plain: NonNullable<boolean | undefined>;
        round: NonNullable<boolean | undefined>;
        iconColor: string;
        to: NonNullable<string | Record<string, any> | undefined>;
        append: NonNullable<boolean | undefined>;
        exact: NonNullable<boolean | undefined>;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: NonNullable<"opacity" | "mask" | undefined>;
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: NonNullable<"opacity" | "mask" | undefined>;
        hoverOpacity: NonNullable<string | number | undefined>;
        hoverMaskColor: string;
        onOpen: (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        ariaLabel: import("../../composables").TranslationProp;
        placement: import("../../composables").PlacementWithAlias;
        offset: number | [number, number];
        role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        innerAnchorSelector: string;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
        readonly: NonNullable<boolean | undefined>;
        closeOnClickOutside: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: boolean;
        hoverOverTimeout: NonNullable<string | number | undefined>;
        hoverOutTimeout: NonNullable<string | number | undefined>;
        isContentHoverable: NonNullable<boolean | undefined>;
        keepAnchorWidth: boolean;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: NonNullable<boolean | undefined>;
        teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        keyboardNavigation: NonNullable<boolean | undefined>;
        contentClass: string;
        openedIcon: string;
        hideIcon: boolean;
        leftIcon: boolean;
        disableButton: boolean;
        disableDropdown: boolean;
        splitTo: string;
        splitHref: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        openedIcon: {
            type: StringConstructor;
            default: string;
        };
        hideIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        iconColor: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableDropdown: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<number | [number, number]>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
        };
        splitTo: {
            type: StringConstructor;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
        ariaLabel: {
            type: import("vue").PropType<import("../../composables").TranslationProp>;
            default: import("../../composables").TranslationProp;
        };
        placement: {
            type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
            default: string;
            validator: (position: import("../../composables").PlacementWithAlias) => boolean;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        trigger: {
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
            default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnClickOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        contentClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<"small" | "medium" | "large" | undefined>>;
            required: true;
            default: "small" | "medium" | "large" | undefined;
        };
        replace: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        type: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        preset: {
            type: import("vue").PropType<NonNullable<import("../../composables").PresetPropValue | undefined>>;
            required: true;
            default: import("../../composables").PresetPropValue | undefined;
        };
        color: {
            type: import("vue").PropType<NonNullable<import("../../composables").ColorName | undefined>>;
            required: true;
            default: import("../../composables").ColorName | undefined;
        };
        textColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        borderColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        gradient: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        tag: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        textOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        backgroundOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        plain: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        round: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        to: {
            type: import("vue").PropType<NonNullable<string | Record<string, any> | undefined>>;
            required: true;
            default: string | Record<string, any> | undefined;
        };
        append: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        exact: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        activeClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        exactActiveClass: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        href: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        pressedBehavior: {
            type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
            required: true;
            default: "opacity" | "mask" | undefined;
        };
        pressedOpacity: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        pressedMaskColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        hoverBehavior: {
            type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
            required: true;
            default: "opacity" | "mask" | undefined;
        };
        hoverOpacity: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        hoverMaskColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
    }>>, {
        hideDropdown: () => void;
    }, {}, {}, {}, {
        onClose: (...args: any[]) => any;
        size: NonNullable<"small" | "medium" | "large" | undefined>;
        replace: NonNullable<boolean | undefined>;
        split: boolean;
        anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        type: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: boolean;
        stateful: boolean;
        preset: NonNullable<import("../../composables").PresetPropValue | undefined>;
        target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        color: NonNullable<import("../../composables").ColorName | undefined>;
        textColor: string;
        icon: string;
        borderColor: string;
        gradient: NonNullable<boolean | undefined>;
        tag: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        loading: boolean;
        disabled: boolean;
        textOpacity: NonNullable<string | number | undefined>;
        backgroundOpacity: NonNullable<string | number | undefined>;
        plain: NonNullable<boolean | undefined>;
        round: NonNullable<boolean | undefined>;
        iconColor: string;
        to: NonNullable<string | Record<string, any> | undefined>;
        append: NonNullable<boolean | undefined>;
        exact: NonNullable<boolean | undefined>;
        activeClass: string;
        exactActiveClass: string;
        href: string;
        pressedBehavior: NonNullable<"opacity" | "mask" | undefined>;
        pressedOpacity: number;
        pressedMaskColor: string;
        hoverBehavior: NonNullable<"opacity" | "mask" | undefined>;
        hoverOpacity: NonNullable<string | number | undefined>;
        hoverMaskColor: string;
        onOpen: (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        ariaLabel: import("../../composables").TranslationProp;
        placement: import("../../composables").PlacementWithAlias;
        offset: number | [number, number];
        role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        innerAnchorSelector: string;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
        readonly: NonNullable<boolean | undefined>;
        closeOnClickOutside: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: boolean;
        hoverOverTimeout: NonNullable<string | number | undefined>;
        hoverOutTimeout: NonNullable<string | number | undefined>;
        isContentHoverable: NonNullable<boolean | undefined>;
        keepAnchorWidth: boolean;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: NonNullable<boolean | undefined>;
        teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        keyboardNavigation: NonNullable<boolean | undefined>;
        contentClass: string;
        openedIcon: string;
        hideIcon: boolean;
        leftIcon: boolean;
        disableButton: boolean;
        disableDropdown: boolean;
        splitTo: string;
        splitHref: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    ariaLabel: {
        type: import("vue").PropType<import("../../composables").TranslationProp>;
        default: import("../../composables").TranslationProp;
    };
    placement: {
        type: import("vue").PropType<import("../../composables").PlacementWithAlias>;
        default: string;
        validator: (position: import("../../composables").PlacementWithAlias) => boolean;
    };
    onClose: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchor: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    target: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    onOpen: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    role: {
        type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    "onAnchor-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    trigger: {
        type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    isContentHoverable: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    autoPlacement: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    teleport: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    keyboardNavigation: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    contentClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: import("vue").PropType<NonNullable<"small" | "medium" | "large" | undefined>>;
        required: true;
        default: "small" | "medium" | "large" | undefined;
    };
    replace: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    type: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    preset: {
        type: import("vue").PropType<NonNullable<import("../../composables").PresetPropValue | undefined>>;
        required: true;
        default: import("../../composables").PresetPropValue | undefined;
    };
    color: {
        type: import("vue").PropType<NonNullable<import("../../composables").ColorName | undefined>>;
        required: true;
        default: import("../../composables").ColorName | undefined;
    };
    textColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    borderColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    gradient: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    tag: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    textOpacity: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    backgroundOpacity: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    plain: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    round: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    to: {
        type: import("vue").PropType<NonNullable<string | Record<string, any> | undefined>>;
        required: true;
        default: string | Record<string, any> | undefined;
    };
    append: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    exact: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    exactActiveClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    href: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    pressedBehavior: {
        type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
        required: true;
        default: "opacity" | "mask" | undefined;
    };
    pressedOpacity: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    pressedMaskColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    hoverBehavior: {
        type: import("vue").PropType<NonNullable<"opacity" | "mask" | undefined>>;
        required: true;
        default: "opacity" | "mask" | undefined;
    };
    hoverOpacity: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    hoverMaskColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
}>>, {
    hideDropdown: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, {
    onClose: (...args: any[]) => any;
    size: NonNullable<"small" | "medium" | "large" | undefined>;
    replace: NonNullable<boolean | undefined>;
    split: boolean;
    anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    type: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: boolean;
    stateful: boolean;
    preset: NonNullable<import("../../composables").PresetPropValue | undefined>;
    target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    color: NonNullable<import("../../composables").ColorName | undefined>;
    textColor: string;
    icon: string;
    borderColor: string;
    gradient: NonNullable<boolean | undefined>;
    tag: string;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    loading: boolean;
    disabled: boolean;
    textOpacity: NonNullable<string | number | undefined>;
    backgroundOpacity: NonNullable<string | number | undefined>;
    plain: NonNullable<boolean | undefined>;
    round: NonNullable<boolean | undefined>;
    iconColor: string;
    to: NonNullable<string | Record<string, any> | undefined>;
    append: NonNullable<boolean | undefined>;
    exact: NonNullable<boolean | undefined>;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    pressedBehavior: NonNullable<"opacity" | "mask" | undefined>;
    pressedOpacity: number;
    pressedMaskColor: string;
    hoverBehavior: NonNullable<"opacity" | "mask" | undefined>;
    hoverOpacity: NonNullable<string | number | undefined>;
    hoverMaskColor: string;
    onOpen: (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    ariaLabel: import("../../composables").TranslationProp;
    placement: import("../../composables").PlacementWithAlias;
    offset: number | [number, number];
    role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    innerAnchorSelector: string;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
    readonly: NonNullable<boolean | undefined>;
    closeOnClickOutside: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: boolean;
    hoverOverTimeout: NonNullable<string | number | undefined>;
    hoverOutTimeout: NonNullable<string | number | undefined>;
    isContentHoverable: NonNullable<boolean | undefined>;
    keepAnchorWidth: boolean;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: NonNullable<boolean | undefined>;
    teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    keyboardNavigation: NonNullable<boolean | undefined>;
    contentClass: string;
    openedIcon: string;
    hideIcon: boolean;
    leftIcon: boolean;
    disableButton: boolean;
    disableDropdown: boolean;
    splitTo: string;
    splitHref: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        label?(_: {}): any;
        content?(_: {}): any;
        default?(_: {}): any;
    };
});
export * from './types';
