import { type RGBObject, type HSLObject } from '../../utils/color';
export declare const isCSSVariable: (strColor: string) => boolean;
export declare const cssVariableName: (colorName: string) => string;
export declare const normalizeColorName: (colorName: string) => string;
export type ColorInput = string | RGBObject | HSLObject;
export declare const colorToRgba: (color: string, opacity: number) => string;
export declare const getColorLightness: (color: ColorInput) => number;
export declare const getBoxShadowColor: (color: string, opacity?: number) => string;
export declare const getBoxShadowColorFromBg: (background: string, opacity?: number) => string;
export declare const getHoverColor: (color: string, opacity?: number) => string;
export declare const getFocusColor: (color: string, opacity?: number) => string;
export declare const shiftHSLAColor: (color: string | RGBObject | HSLObject, shift: {
    h?: number;
    s?: number;
    l?: number;
    a?: number;
}) => string;
export declare const setHSLAColor: (color: string | RGBObject | HSLObject, shift: {
    h?: number;
    s?: number;
    l?: number;
    a?: number;
}) => string;
/**
 * This method guesses second color for gradient based on first one.
 * Calculation method should differ for different colors, so we split color circle
 * in zones.
 *
 * @param color
 */
export declare const shiftGradientColor: (color: string) => string;
export declare const getGradientBackground: (color: string) => string;
export declare const getStateMaskGradientBackground: (color: string, maskColor: string, maskOpacity: number) => string;
export declare const applyColors: (color1: string, color2: string) => string;
/**
 * Returns `true` if color is FULLY transparent
 */
export declare const isColorTransparent: (color: string) => boolean;
export { isColor } from './../../utils/color';
