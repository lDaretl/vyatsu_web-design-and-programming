export type CssColor = string;
export type EssentialVariables = {
    primary: CssColor;
    secondary: CssColor;
    success: CssColor;
    info: CssColor;
    danger: CssColor;
    warning: CssColor;
    backgroundPrimary: CssColor;
    backgroundSecondary: CssColor;
    backgroundElement: CssColor;
    backgroundBorder: CssColor;
    textPrimary: CssColor;
    textInverted: CssColor;
    shadow: CssColor;
    focus: CssColor;
    transparent: CssColor;
};
/**
 * This is a placeholder meant to be implemented via TypeScript's Module
 * Augmentation feature to allow key type inference
 *
 * @example
 * ```ts
 * declare module 'vuestic-ui' {
 *   interface CustomColorVariables {
 *     newColor: string
 *   }
 * }
 * ```
 *
 * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation
 */
export interface CustomColorVariables {
}
type Capitalize<S extends string> = S extends `${infer First}${infer Rest}` ? `${Uppercase<First>}${Rest}` : S;
type OnColors = `on${Capitalize<keyof EssentialVariables | keyof CustomColorVariables>}`;
export type ColorVariables = EssentialVariables & CustomColorVariables & {
    [key in OnColors]?: CssColor;
} & Record<string & Record<never, never>, CssColor>;
export type ColorName = keyof ColorVariables | keyof CustomColorVariables;
export type ColorConfig = {
    variables: ColorVariables;
    threshold: number;
    presets: {
        light: ColorVariables;
        dark: ColorVariables;
        [presetName: string]: ColorVariables;
    };
    currentPresetName: string;
};
export {};
